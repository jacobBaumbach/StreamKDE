package com.jwb.streamKDE

import co.theasi.plotly._

class KernelPlot(km: KernelMap, size: Int = 1000){
  /*
   * KernelPlot is a way to generate plots of the cdf and pdf generated by the KernelMap and comparison plots between
   * the KernelMap approximation and the actual cdf or pdf using plotly
   *
   * WARNING: You need a plotly account to use this class.  See here: https://plot.ly/scala/getting-started/
   *
   * @param km the KernelMap you want to use to generate plots
   * @param size the number of elements you would like used to generate your plot
   */

  // ensures the instance of KernelMap has enough elements to generate a plot
  require(km.size > 1, "must have at minimum 2 distinct elements")

  // generates a stream of evenly spaced doubles containing size number of elements
  // to be used as input to either the cdf or pdf function(s)
  val range = {
    val keys = km.kMap.keys
    val (begin, end) = (keys.head, keys.last)
    val stepSize = (end - begin) / size
    begin to end by stepSize
  }

  /*
   * plot is a higher order function that adds a line to either a new plot or an already existing plot
   *
   * @param func takes a value from range and calculates either its cdf or pdf value
   * @param name the string to be used in the legend of the plot for the cdf or pdf that's generated
   * @param additionalPlot either contains a Cartesian Plot which a line will be added to or nothing
   *                       which means a new plot will be generated
   *
   * @return a plot with a line added to it wrapped in an Option
   */
  def plot(func: Double => Double)(name: String, additionalPlot: Option[CartesianPlot] = None): Option[CartesianPlot] = {
    val y = range.map(func)
    val plot = additionalPlot.getOrElse(CartesianPlot()).withScatter(range, y, ScatterOptions().mode(ScatterMode.Line).name(name))
    Some(plot)
  }

  /*
   * composePartialPlots is a higher order function that allows you to generate a plot with an additional line
   *
   * @param partialPlot function that generates a plot which an additional line will be added to it
   * @param func2 func takes a value from range and calculates either its cdf or pdf value for the additional line
   * @param name1 the string to be used in the legend of the plot for the cdf or pdf that's generated will be
   *              passed to partialPlot
   * @param name2 the string to be used in the legend of the plot for the cdf or pdf for the additional line
   *
   * @return plot with the additional line wrapped in an option
   */
  def composePartialPlots(partialPlot: String => Option[CartesianPlot],func2: Double => Double, name1: String,
                          name2: String): Option[CartesianPlot] = plot(func2)(name2, partialPlot(name1))

  /*
   * kdeCdf generates a plot of the cdf approximation created by km
   *
   * @param name the string to be used in the legend of the plot for the approximated cdf
   *
   * @return plot containing the approximated cdf wrapped in an option
   */
  def kdeCdf(name: String): Option[CartesianPlot] = plot(km.cdf)(name)

  /*
   * kdePdf generates a plot of the pdf approximation created by km
   *
   * @param name the string to be used in the legend of the plot for the approximated pdf
   *
   * @return plot containing the approximated pdf wrapped in an option
   */
  def kdePdf(name: String): Option[CartesianPlot] = plot(km.pdf)(name)

  /*
   * comparisonCdf generates a plot with the approximated and actual cdf lines
   *
   * @param actualCdf func takes a value from range and calculates the actual cdf values for the actual cdf line
   * @param actualCdfName the string to be used in the legend of the plot for the approximated cdf
   * @param approxCdfName the string to be used in the legend of the plot for the actual cdf
   *
   * @return plot with the approximated and actual cdf lines wrapped in an option
   */
  def comparisonCdf(actualCdf: Double => Double, actualCdfName: String,
                    approxCdfName: String): Option[CartesianPlot] =
    composePartialPlots(kdeCdf, actualCdf, approxCdfName, actualCdfName)

  /*
   * comparisonPdf generates a plot with the approximated and actual pdf lines
   *
   * @param actualPdf func takes a value from range and calculates the actual pdf values for the actual pdf line
   * @param actualPdfName the string to be used in the legend of the plot for the approximated pdf
   * @param approxPdfName the string to be used in the legend of the plot for the actual pdf
   *
   * @return plot with the approximated and actual pdf lines wrapped in an option
   */
  def comparisonPdf(actualPdf: Double => Double, actualPdfName: String,
                    approxPdfName: String): Option[CartesianPlot] =
    composePartialPlots(kdePdf, actualPdf, approxPdfName, actualPdfName)

  /*
   * plot2Figure wraps a plot in a figure object so a title can be added to the plot
   *
   * @param plot the plot to be wrapped and have a title added to it
   * @param title the string to be used for the title of the plot
   *
   * @return a figure object containing the plot and title
   */
  def plot2Figure(plot: CartesianPlot, title: String): Figure =
    Figure().plot(plot).title(title)

  /*
   * drawFigure takes a figure and plots the plot on plotly
   *
   * @param figure a plotly Figure object which will be plotted
   * @param title the name that will be given to the generated file
   *
   * @return a file of your figure is generated in your plotly account
   */
  def drawFigure(figure: Figure, title: String) = draw(figure, title)

  /*
   * plotDraw takes a plot wraps it in a figure and plots it on plotly
   *
   * @param plot the plot to be plotted
   * @title string to be the title of your plot and the name of the generated file
   *
   * @return a file of your figure is generated in your plotly account
   */
  def plotDraw(plot: CartesianPlot, title: String)= drawFigure(plot2Figure(plot,title), title)

  /*
   * composePlotDraw higher order function that takes a plot function and generates a file of its result
   *
   * @param plotF function that generates a plot
   * @param name string to be passed to plotF, will be the name of the line generated by plotF
   * @param title string to be the title of your plot and the name of the generated file
   *
   * @return a file of your plot is generated in your plotly account
   */
  def composePlotDraw(plotF: String => Option[CartesianPlot], name: String, title: String) =
    plotF(name).map(plotDraw(_, title))

  /*
   * composePlotDraw higher order function that takes a plot function and generates a file of its result
   *
   * @param plotF function that generates a plot
   * @param actualF to be passed to plotF, func takes a value from range and calculates either its cdf or pdf
   *                value for the additional line
   * @param actualName string to be passed to plotF, will be the name of the line generated by actualF
   * @param approxName string to be passed to plotF, will be the name of the line generated by the approximation
   * @param title string to be the title of your plot and the name of the generated file
   *
   * @return a file of your plot is generated in your plotly account
   */
  def composePlotDraw(plotF: (Double => Double, String, String) => Option[CartesianPlot], actualF: Double => Double,
                      actualName: String, approxName: String, title: String) =
    plotF(actualF, actualName, approxName).map(plotDraw(_, title))

  /*
   * drawCdf generates a file of the cdf approximation created by km
   *
   * @param name the string to be used in the legend of the plot for the approximated cdf
   * @param title string to be the title of your plot and the name of the generated file
   *
   * @return file containing the approximated cdf
   */
  def drawCdf(name: String, title: String) = composePlotDraw(kdeCdf, name, title)

  /*
   * drawPdf generates a file of the pdf approximation created by km
   *
   * @param name the string to be used in the legend of the plot for the approximated pdf
   * @param title string to be the title of your plot and the name of the generated file
   *
   * @return file containing the approximated pdf
   */
  def drawPdf(name: String, title: String) = composePlotDraw(kdePdf, name, title)

  /*
   * drawComparisonCdf generates a file with the approximated and actual cdf lines
   *
   * @param actualCdf func takes a value from range and calculates the actual cdf values for the actual cdf line
   * @param actualCdfName the string to be used in the legend of the plot for the approximated cdf
   * @param approxCdfName the string to be used in the legend of the plot for the actual cdf
   * @param title string to be the title of your plot and the name of the generated file
   *
   * @return file with the approximated and actual cdf lines
   */
  def drawComparisonCdf(actualCdf: Double => Double, actualCdfName: String,
                         approxCdfName: String, title: String) =
    composePlotDraw(comparisonCdf, actualCdf, actualCdfName, approxCdfName, title)

  /*
   * drawComparisonPdf generates a file with the approximated and actual pdf lines
   *
   * @param actualPdf func takes a value from range and calculates the actual pdf values for the actual cdf line
   * @param actualPdfName the string to be used in the legend of the plot for the approximated pdf
   * @param approxPdfName the string to be used in the legend of the plot for the actual pdf
   * @param title string to be the title of your plot and the name of the generated file
   *
   * @return file with the approximated and actual pdf lines
   */
  def drawComparisonPdf(actualPdf: Double => Double, actualPdfName: String,
                        approxPdfName: String, title: String) =
    composePlotDraw(comparisonPdf, actualPdf, actualPdfName, approxPdfName, title)

}